Сделать простое веб-приложение на Spring Boot, для управления книгами в библиотеке, в качестве демонстрации основных концепций Java и Spring Boot.

Страницы приложения, доступные без авторизации. Страницы 2,3,4,5,6 - в виде REST API отдающего JSON
1. Логин (простая html форма) /login
2. Список книг (в виде json) /books
3. Описание книги	/book/{id}
4. Список авторов  /authors
5. Описание автора /author/{id}
6. Страница about /about - вывести имя и роль текущего пользователя или написать, что пользователь не аутентифицирован
7. Страница отдающая статистику для Prometheus
8. Выход /logout

Админка в виде REST API. Страницы 1,2,3,4,5 в виде REST API отдающего JSON
1. Список пользователей  /users - доступно только для роли admin
2. Редактирование\создание пользователя /user/{id} - доступно только для роли admin
3. Редактирование\создание автора /author/{id} - доступно только для ролей admin и user
4. Редактирование\создание книги /book/{id} - доступно только для ролей admin и user
5. Найти все книги по части имени автора /findbooks?{sometext}, где sometext используется для LIKE поиска %sometext% по авторам. Сделать через entityManager и createQuery.

Авторизация - form-based auth, хранение пользователей в БД PostgreSQL.
Хранение свойств (логин\пароль БД, порт приложения etc) - в yaml файле
Стартовая инициализация базы данных через Liquibase: надо добавить двух пользователей (admin/admin, user/user), добавить трех авторов (Ильф, Петров, Толстой), добавить две книги с указанием их авторов: "12 Стульев" и "Война и Мир"

Стек технологий
Spring Boot 2.5
Spring Security
Spring Data
LomBok
Liquibase
PostgreSQL
Фронт без каких-либо JS библиотек.

Дополнительные фишки
1. Централизованное управление исключениями. При запросе несуществующей книги генерить исключение BookNotFound
2. Добавить запись логов всех запросов в log файл с ротацией
